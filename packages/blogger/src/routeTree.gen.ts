/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as PreviewImport } from './routes/preview'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => rootRoute,
} as any)

const PreviewRoute = PreviewImport.update({
    id: '/preview',
    path: '/preview',
    getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/': {
            id: '/'
            path: '/'
            fullPath: '/'
            preLoaderRoute: typeof IndexImport
            parentRoute: typeof rootRoute
        }
        '/preview': {
            id: '/preview'
            path: '/preview'
            fullPath: '/preview'
            preLoaderRoute: typeof PreviewImport
            parentRoute: typeof rootRoute
        }
        '/settings': {
            id: '/settings'
            path: '/settings'
            fullPath: '/settings'
            preLoaderRoute: typeof SettingsImport
            parentRoute: typeof rootRoute
        }
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    '/': typeof IndexRoute
    '/preview': typeof PreviewRoute
    '/settings': typeof SettingsRoute
}

export interface FileRoutesByTo {
    '/': typeof IndexRoute
    '/preview': typeof PreviewRoute
    '/settings': typeof SettingsRoute
}

export interface FileRoutesById {
    __root__: typeof rootRoute
    '/': typeof IndexRoute
    '/preview': typeof PreviewRoute
    '/settings': typeof SettingsRoute
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath
    fullPaths: '/' | '/preview' | '/settings'
    fileRoutesByTo: FileRoutesByTo
    to: '/' | '/preview' | '/settings'
    id: '__root__' | '/' | '/preview' | '/settings'
    fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute
    PreviewRoute: typeof PreviewRoute
    SettingsRoute: typeof SettingsRoute
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    PreviewRoute: PreviewRoute,
    SettingsRoute: SettingsRoute,
}

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/preview",
        "/settings"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/preview": {
      "filePath": "preview.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
